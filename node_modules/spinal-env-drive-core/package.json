{
  "_args": [
    [
      {
        "raw": "spinal-env-drive-core@git+https://github.com/spinalcom/spinal-env-drive-core.git",
        "scope": null,
        "escapedName": "spinal-env-drive-core",
        "name": "spinal-env-drive-core",
        "rawSpec": "git+https://github.com/spinalcom/spinal-env-drive-core.git",
        "spec": "git+https://github.com/spinalcom/spinal-env-drive-core.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:spinalcom/spinal-env-drive-core.git",
          "sshUrl": "git+ssh://git@github.com/spinalcom/spinal-env-drive-core.git",
          "httpsUrl": "git+https://github.com/spinalcom/spinal-env-drive-core.git",
          "gitUrl": "git://github.com/spinalcom/spinal-env-drive-core.git",
          "shortcut": "github:spinalcom/spinal-env-drive-core",
          "directUrl": "https://raw.githubusercontent.com/spinalcom/spinal-env-drive-core/master/package.json"
        }
      },
      "/home/hossam/SpinalCom/spinal-env-drive-plugin-ifc"
    ]
  ],
  "_from": "git+https://github.com/spinalcom/spinal-env-drive-core.git",
  "_id": "spinal-env-drive-core@1.0.2",
  "_inCache": true,
  "_location": "/spinal-env-drive-core",
  "_phantomChildren": {},
  "_requested": {
    "raw": "spinal-env-drive-core@git+https://github.com/spinalcom/spinal-env-drive-core.git",
    "scope": null,
    "escapedName": "spinal-env-drive-core",
    "name": "spinal-env-drive-core",
    "rawSpec": "git+https://github.com/spinalcom/spinal-env-drive-core.git",
    "spec": "git+https://github.com/spinalcom/spinal-env-drive-core.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:spinalcom/spinal-env-drive-core.git",
      "sshUrl": "git+ssh://git@github.com/spinalcom/spinal-env-drive-core.git",
      "httpsUrl": "git+https://github.com/spinalcom/spinal-env-drive-core.git",
      "gitUrl": "git://github.com/spinalcom/spinal-env-drive-core.git",
      "shortcut": "github:spinalcom/spinal-env-drive-core",
      "directUrl": "https://raw.githubusercontent.com/spinalcom/spinal-env-drive-core/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/spinalcom/spinal-env-drive-core.git#45239fd1d7eb65070532c5187a7a1c67603e7833",
  "_shasum": "06dd6b4b299ae334450feb6ebac1133cc8624a29",
  "_shrinkwrap": null,
  "_spec": "spinal-env-drive-core@git+https://github.com/spinalcom/spinal-env-drive-core.git",
  "_where": "/home/hossam/SpinalCom/spinal-env-drive-plugin-ifc",
  "author": {
    "name": "Laurent HA TAM DAN"
  },
  "bin": {
    "create_plugin_template": "create_plugin_template.js"
  },
  "dependencies": {
    "spinal-core-connectorjs": "git+https://github.com/spinalcom/spinal-core-connectorjs.git"
  },
  "description": "core class to create and add plugin in spinaldrive",
  "devDependencies": {},
  "gitHead": "45239fd1d7eb65070532c5187a7a1c67603e7833",
  "license": "SEE LICENSE IN license.pdf",
  "main": "index.js",
  "name": "spinal-env-drive-core",
  "optionalDependencies": {},
  "readme": "# spinal-env-drive-core\n\n## Classes\n\n<dl>\n<dt><a href=\"#SpinalDrive_Env\">SpinalDrive_Env</a></dt>\n<dd><p>Class representing the SpinalDrive Environnement</p>\n</dd>\n<dt><a href=\"#SpinalDrive_App_list\">SpinalDrive_App_list</a></dt>\n<dd><p>Class representing a list of applications unique</p>\n</dd>\n<dt><a href=\"#SpinalDrive_App\">SpinalDrive_App</a></dt>\n<dd><p>interface on an app</p>\n</dd>\n</dl>\n\n<a name=\"SpinalDrive_Env\"></a>\n\n## SpinalDrive_Env\nClass representing the SpinalDrive Environnement\n\n**Kind**: global class  \n\n* [SpinalDrive_Env](#SpinalDrive_Env)\n    * [new SpinalDrive_Env()](#new_SpinalDrive_Env_new)\n    * [.add_applications(key, app)](#SpinalDrive_Env+add_applications)\n    * [.get_applications(key, d)](#SpinalDrive_Env+get_applications)\n\n<a name=\"new_SpinalDrive_Env_new\"></a>\n\n### new SpinalDrive_Env()\nCreates an instance of SpinalDrive_Env.\n\n<a name=\"SpinalDrive_Env+add_applications\"></a>\n\n### spinalDrive_Env.add_applications(key, app)\nadd_navbar_application.\n\n**Kind**: instance method of [<code>SpinalDrive_Env</code>](#SpinalDrive_Env)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | key string of the layer: `FolderExplorer` or 'FileExplorer' or `Inspector` or `FileExplorerCurrDir` |\n| app | [<code>SpinalDrive_App</code>](#SpinalDrive_App) \\| <code>any</code> | should be an SpinalDrive_App |\n\n<a name=\"SpinalDrive_Env+get_applications\"></a>\n\n### spinalDrive_Env.get_applications(key, d)\nget_applications\n\n**Kind**: instance method of [<code>SpinalDrive_Env</code>](#SpinalDrive_Env)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | key string of the layer |\n| d | <code>object</code> | dbject send to is_shown defined by each layout |\n\n<a name=\"SpinalDrive_App_list\"></a>\n\n## SpinalDrive_App_list\nClass representing a list of applications unique\n\n**Kind**: global class  \n\n* [SpinalDrive_App_list](#SpinalDrive_App_list)\n    * [.push(obj)](#SpinalDrive_App_list+push)\n    * [.remove_by_name(name)](#SpinalDrive_App_list+remove_by_name) ⇒ <code>boolean</code>\n    * [.remove_by_id(id)](#SpinalDrive_App_list+remove_by_id) ⇒ [<code>SpinalDrive_App</code>](#SpinalDrive_App)\n    * [.get(idx)](#SpinalDrive_App_list+get) ⇒ [<code>SpinalDrive_App</code>](#SpinalDrive_App)\n    * [.length()](#SpinalDrive_App_list+length) ⇒ <code>number</code>\n    * [.get_by_name(name)](#SpinalDrive_App_list+get_by_name) ⇒ [<code>SpinalDrive_App</code>](#SpinalDrive_App)\n\n<a name=\"SpinalDrive_App_list+push\"></a>\n\n### spinalDrive_App_list.push(obj)\n**Kind**: instance method of [<code>SpinalDrive_App_list</code>](#SpinalDrive_App_list)  \n\n| Param | Type |\n| --- | --- |\n| obj | [<code>SpinalDrive_App</code>](#SpinalDrive_App) \\| <code>any</code> | \n\n<a name=\"SpinalDrive_App_list+remove_by_name\"></a>\n\n### spinalDrive_App_list.remove_by_name(name) ⇒ <code>boolean</code>\n**Kind**: instance method of [<code>SpinalDrive_App_list</code>](#SpinalDrive_App_list)  \n**Returns**: <code>boolean</code> - false if nothing to delete  \n\n| Param | Type |\n| --- | --- |\n| name | <code>string</code> | \n\n<a name=\"SpinalDrive_App_list+remove_by_id\"></a>\n\n### spinalDrive_App_list.remove_by_id(id) ⇒ [<code>SpinalDrive_App</code>](#SpinalDrive_App)\n**Kind**: instance method of [<code>SpinalDrive_App_list</code>](#SpinalDrive_App_list)  \n\n| Param | Type |\n| --- | --- |\n| id | <code>number</code> | \n\n<a name=\"SpinalDrive_App_list+get\"></a>\n\n### spinalDrive_App_list.get(idx) ⇒ [<code>SpinalDrive_App</code>](#SpinalDrive_App)\n**Kind**: instance method of [<code>SpinalDrive_App_list</code>](#SpinalDrive_App_list)  \n\n| Param | Type |\n| --- | --- |\n| idx | <code>number</code> | \n\n<a name=\"SpinalDrive_App_list+length\"></a>\n\n### spinalDrive_App_list.length() ⇒ <code>number</code>\n**Kind**: instance method of [<code>SpinalDrive_App_list</code>](#SpinalDrive_App_list)  \n<a name=\"SpinalDrive_App_list+get_by_name\"></a>\n\n### spinalDrive_App_list.get_by_name(name) ⇒ [<code>SpinalDrive_App</code>](#SpinalDrive_App)\n**Kind**: instance method of [<code>SpinalDrive_App_list</code>](#SpinalDrive_App_list)  \n**Returns**: [<code>SpinalDrive_App</code>](#SpinalDrive_App) - returns 0 on notfound.  \n\n| Param | Type |\n| --- | --- |\n| name | <code>string</code> | \n\n<a name=\"SpinalDrive_App\"></a>\n\n## SpinalDrive_App\ninterface on an app\n\n**Kind**: global class  \n\n* [SpinalDrive_App](#SpinalDrive_App)\n    * [new SpinalDrive_App([name], [label], [id], [icon], [description])](#new_SpinalDrive_App_new)\n    * [.action(params)](#SpinalDrive_App+action)\n    * [.launch_action(params)](#SpinalDrive_App+launch_action)\n    * [.is_shown(d)](#SpinalDrive_App+is_shown) ⇒ <code>boolean</code>\n\n<a name=\"new_SpinalDrive_App_new\"></a>\n\n### new SpinalDrive_App([name], [label], [id], [icon], [description])\nCreates an instance of SpinalDrive_App.\n\n\n| Param | Type | Default |\n| --- | --- | --- |\n| [name] | <code>string</code> |  | \n| [label] | <code>string</code> |  | \n| [id] | <code>number</code> | <code>0</code> | \n| [icon] | <code>string</code> |  | \n| [description] | <code>string</code> |  | \n\n<a name=\"SpinalDrive_App+action\"></a>\n\n### spinalDrive_App.action(params)\nHandler to the callback on click.\nMethod to be Overridden in child\n\n**Kind**: instance method of [<code>SpinalDrive_App</code>](#SpinalDrive_App)  \n\n| Param | Type |\n| --- | --- |\n| params | <code>any</code> | \n\n<a name=\"SpinalDrive_App+launch_action\"></a>\n\n### spinalDrive_App.launch_action(params)\nMethod called onclick will call this.action inside\n\n**Kind**: instance method of [<code>SpinalDrive_App</code>](#SpinalDrive_App)  \n\n| Param | Type |\n| --- | --- |\n| params | <code>any</code> | \n\n<a name=\"SpinalDrive_App+is_shown\"></a>\n\n### spinalDrive_App.is_shown(d) ⇒ <code>boolean</code>\nmethod to know if the app is needed to be shown.\n\n**Kind**: instance method of [<code>SpinalDrive_App</code>](#SpinalDrive_App)  \n**Returns**: <code>boolean</code> - return true if need to be shown;  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| d | <code>Object</code> | object representing selection |\n\n",
  "readmeFilename": "README.md",
  "scripts": {
    "create_plugin_template": "create_plugin_template",
    "postinstall": "npm run create_plugin_template",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.2"
}
